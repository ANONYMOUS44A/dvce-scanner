#!/bin/bash
clear

# Make Configs
if [[ "$(uname -o 2>/dev/null)" == "Android" ]]; then
    continue
elif [ "$(uname)" == "Linux" ]; then
    cp dvce-scan /bin/dvce-scan
    chmod +x /bin/dvce-scan
fi

while getopts ":p:" opt; do
    case ${opt} in
        p )
            prefix_arg=$OPTARG
            ;;
        \? )
            echo -e "\e[31mInvalid option: $OPTARG\e[0m" 1>&2
            exit 1
            ;;
        : )
            echo -e "\e[31mError: Option -$OPTARG requires an argument.\e[0m" 1>&2
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

# Extracting IP range start from model_arg
prefix=$(echo "$prefix_arg" | grep -oP '\d+\.\d+\.\d+\.')

if [[ -z "$prefix" ]]; then
      echo " ┌────────────────────────────────────────┐ "
      echo " │          |D|V|C|E|-|S|C|A|N|           │ "
      echo " └────────────────────────────────────────┘ "
      echo -e "Usage: dvce-scan -p <prefix (e.g 192.168.10.R)>"
      echo
      echo -e "R = Range (Default: 1-255) "
      echo -e "p = prefix (e.g prefix:{192.168.10.}range:[1-255])"
      echo
      exit 0
fi

# Checking if model_arg ends with ".R"
if [[ ! "$prefix_arg" =~ \.R$ ]]; then
    echo -e "\e[31mError: Invalid model format. Please ensure the IP format ends with '.R'.\e[0m"
    exit 1
fi

# Set the maximum number of open file descriptors to 2048
ulimit -n 2048

# Scan for Devices IP & DNSs
clear
echo " ┌────────────────────────────────────────┐ "
echo " │          |D|V|C|E|-|S|C|A|N|           │ "
echo " └────────────────────────────────────────┘ "
echo "    ::: DEVELOPED BY PENTAGONE GROUP :::    "
echo "────────────────────────────────────────────"
echo " └─[ PREFIX ] ➤  $prefix{1-255}               "
echo "────────────────────────────────────────────"
echo
echo -e "┌───────────────────────┰─────────────────────────┐"
echo -e "│    DEVICE DNS NAMES   ┃   DEVICE IP ADDRESSES   │"
echo -e "└───────────────────────┸─────────────────────────┘"
parallel -j 0 '
    ping -c 0.2 '$prefix'{} &>/dev/null
    dns_name=$(host '$prefix'{} | awk "/domain name pointer/{print \$5}")
    if [ -n "$dns_name" ]; then
        echo "    ┌──────────────────────────────────────────┐"
        printf " ➤  │ %-40s │\n" "$dns_name  '$prefix'{}"
        echo "    └──────────────────────────────────────────┘"
    fi
' ::: $(seq 1 255)
echo
echo "────────────────────────────────────────────"
echo "                  Done.                     "
echo "────────────────────────────────────────────"
